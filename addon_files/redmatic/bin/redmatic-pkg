#!/bin/sh

ADDON_DIR=/usr/local/addons/redmatic
REPO=$ADDON_DIR/lib/pkg-repo.json

source $ADDON_DIR/home/.profile

function usage()
{
    echo "Usage: redmatic-pkg <command> [package]"
    echo "commands:"
    echo "    install <package>"
    echo "        install or update a package"
    echo "    upgrade"
    echo "        update all packages"
    echo "    remove <package>"
    echo ""
}

function install()
{
    PACKAGE="$1"
    URL=`jq -r ".\"$PACKAGE\".resolved" $REPO`
    INTEGRITY=`jq -r ".\"$PACKAGE\".integrity" $REPO`
    VERSION=`jq -r ".\"$PACKAGE\".version" $REPO`

    if [ $URL == "null" ]; then
      echo "unknown package: $1"
      exit 1
    fi

    if [ -f $ADDON_DIR/lib/node_modules/$PACKAGE/package.json ]; then
        CURRENT_VERSION=`jq -r ".version" $ADDON_DIR/lib/node_modules/$PACKAGE/package.json`
        if [ $CURRENT_VERSION == $VERSION ]; then
            echo "Package $PACKAGE $CURRENT_VERSION is up-to-date"
            exit 0
        else
            echo "Package $PACKAGE update $CURRENT_VERSION to $VERSION"
        fi
    fi

    echo "Get $URL"
    set -o pipefail
    T_START=$(date +"%s")
    /usr/bin/curl $URL -o $ADDON_DIR/tmp/$1.tar.gz --fail --show-error --silent --location || exit 1
    T_END=$(date +"%s")
    echo "Downloaded $(stat -c %s $ADDON_DIR/tmp/$1.tar.gz | awk '{ suffix="KMGT"; for(i=0; $1>1024 && i < length(suffix); i++) $1/=1024; print int($1) substr(suffix, i, 1), $3; }')in $(( T_END-T_START )) seconds"

    D_INTEGRITY=sha512-$(cat $ADDON_DIR/tmp/$1.tar.gz | /usr/bin/openssl sha512 -binary | base64 | tr -d \\n)

    if [ "$INTEGRITY" == "$D_INTEGRITY" ]; then
        echo "File integrity check successful"
    else
        echo "File integrity check failed"
        rm $ADDON_DIR/tmp/$1.tar.gz
        exit 1
    fi

    rm -r $ADDON_DIR/lib/node_modules/$PACKAGE 2> /dev/null

    echo "Extracting $1.tar.gz"
    (cd $ADDON_DIR ; tar --no-same-owner -xzf tmp/$1.tar.gz) || exit 1

    rm $ADDON_DIR/tmp/$1.tar.gz
    echo "Done."
}

function remove()
{
    PACKAGE="$1"
    rm -r $ADDON_DIR/lib/node_modules/$PACKAGE 2> /dev/null
    echo "Done."
}

function upgrade()
{
    RESULT=0
    for k in $($ADDON_DIR/bin/jq -r '. | to_entries[] | "\(.key)"' $ADDON_DIR/lib/pkg-repo.json); do
        if [ -d $ADDON_DIR/lib/node_modules/$k ]; then
            $ADDON_DIR/bin/redmatic-pkg install $k 2>&1 || RESULT=1
        fi
    done
    exit $RESULT
}


case $1 in
    i | install)
        install $2
    exit
    ;;
    r | remove)
        remove $2
    exit
    ;;
    upgrade)
        upgrade
    exit
    ;;
    *)
    usage
    exit 1
    ;;
esac

